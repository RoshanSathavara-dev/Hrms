@model List<Attendance>
@using Microsoft.EntityFrameworkCore
@using Hrms_system.Data
@inject ApplicationDbContext _context
@{
    Layout = "_AdminLayout";
    var today = DateTime.Today;
    var viewType = ViewBag.ViewType ?? "daily";
    var selectedMonth = ViewBag.SelectedMonth ?? today.ToString("yyyy-MM");
    var employees = ViewBag.Employees as List<Employee> ?? new List<Employee>();

    var expectedHours = ViewBag.ExpectedWorkHours as TimeSpan? ?? TimeSpan.FromHours(8);

    var monthStart = new DateTime(DateTime.Parse(selectedMonth + "-01").Year, DateTime.Parse(selectedMonth + "-01").Month, 1);
    var monthEnd = monthStart.AddMonths(1).AddDays(-1);
    var leaveRequests = await _context.LeaveRequests
        .Where(l => l.Status == "Approved" &&
                    l.StartDate.Date <= monthEnd.Date &&
                    l.EndDate.Date >= monthStart.Date)
        .ToListAsync();
}

<!-- Add this at the top of <div class="container-fluid"> -->
<div aria-live="polite" aria-atomic="true" style="position: relative;">
    <div style="position: fixed; top: 20px; right: 20px; z-index: 1050;">
        <div id="toastContainer" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="3000">
            <div class="toast-header">
                <strong class="me-auto" id="toastTitle"></strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12">
            <h2>Attendance Management</h2>
        </div>
    </div>


    <!-- View Type Toggle -->
    <div class="btn-group mb-3" role="group">
        <a href="@Url.Action("Attendance", new { viewType = "daily" })"
           class="btn btn-sm @(viewType == "daily" ? "btn-admin" : "btn-outline-secondary")">
            <i class="fas fa-calendar-day"></i> Daily View
        </a>
        <a href="@Url.Action("Attendance", new { viewType = "monthly", month = selectedMonth })"
           class="btn btn-sm @(viewType == "monthly" ? "btn-admin" : "btn-outline-secondary")">
            <i class="fas fa-calendar-alt"></i> Monthly View
        </a>
    </div>

    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-4 border-bottom">
        <h1 class="h2">Attendance Logs</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <div class="btn-group me-2">
                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="exportAttendance()">Export</button>
                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="printAttendance()">Print</button>
            </div>
            <button type="button" class="btn btn-sm" data-bs-toggle="modal" data-bs-target="#manualEntryModal">
                <i class="fas fa-plus me-1"></i> Manual Entry
            </button>
        </div>
    </div>


    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="filterForm" method="get">
                <input type="hidden" name="viewType" value="@viewType" />
                <div class="row g-3 align-items-center">
                    @if (viewType == "monthly")
                    {
                        <div class="col-md-3">
                            <label class="form-label">Select Month</label>
                            <input type="month" name="month" class="form-control" value="@selectedMonth" />
                        </div>
                    }
                    else
                    {
                        <div class="col-md-3">
                            <label class="form-label">From Date</label>
                            <input type="date" name="fromDate" class="form-control" value="@(ViewBag.FromDate?.ToString("yyyy-MM-dd") ?? today.ToString("yyyy-MM-dd"))" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">To Date</label>
                            <input type="date" name="toDate" class="form-control" value="@(ViewBag.ToDate?.ToString("yyyy-MM-dd") ?? today.ToString("yyyy-MM-dd"))" />
                        </div>
                    }
                    <div class="col-md-3">
                        <label class="form-label">Status</label>
                        <select name="status" class="form-select">
                            <option value="">All</option>
                            <option value="Present" selected="@(ViewBag.Status == "Present")">Present</option>
                            <option value="Absent" selected="@(ViewBag.Status == "Absent")">Absent</option>
                            <option value="Late" selected="@(ViewBag.Status == "Late")">Late</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Department</label>
                        <select name="department" class="form-select">
                            <option value="">All</option>
                            <option value="IT" selected="@(ViewBag.Department == "IT")">IT</option>
                            <option value="HR" selected="@(ViewBag.Department == "HR")">HR</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button type="submit" class="btn btn-admin mt-4">Filter</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card border-start border-success border-4 h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Present Today</h6>
                            <h3 class="mb-0">@Model.Count(a => a.ClockOut != null)</h3>
                        </div>
                        <div class="bg-success bg-opacity-10 p-3 rounded">
                            <i class="fas fa-user-check text-success fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-start border-warning border-4 h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Late Arrivals</h6>
                            <h3 class="mb-0">@Model.Count(a => a.ClockIn.TimeOfDay > TimeSpan.FromHours(9))</h3>
                        </div>
                        <div class="bg-warning bg-opacity-10 p-3 rounded">
                            <i class="fas fa-clock text-warning fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-start border-danger border-4 h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Absent</h6>
                            <h3 class="mb-0">@Model.Count(a => a.ClockOut == null)</h3>
                        </div>
                        <div class="bg-danger bg-opacity-10 p-3 rounded">
                            <i class="fas fa-user-slash text-danger fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (viewType == "monthly")
    {
        var holidays = ViewBag.Holidays as List<Holiday> ?? new List<Holiday>();
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Monthly Attendance - @DateTime.Parse(selectedMonth + "-01").ToString("MMMM yyyy")</h5>
                <div>
                    <button class="btn btn-sm btn-danger me-2" onclick="importAttendance()">Import</button>
                    <button class="btn btn-sm btn-primary" onclick="exportAttendance()">Export</button>
                </div>
            </div>
            <!-- Add this legend section -->
            <div class="card-body py-2 border-bottom">
                <div class="d-flex flex-wrap gap-2">
                    <div class="d-flex align-items-center">
                        <span class="badge bg-success me-1">P</span>
                        <small>Present</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-warning me-1">L</span>
                        <small>Late</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-danger me-1">A</span>
                        <small>Absent</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-info me-1">H</span>
                        <small>Holiday</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-secondary me-1">WO</span>
                        <small>Week Off</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-primary me-1">L</span>
                        <small>Leave</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-primary me-1">FH</span>
                        <small>First Half</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-primary me-1">SH</span>
                        <small>Second Half</small>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Employee Name</th>
                                <th>Department</th>
                                @for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Parse(selectedMonth + "-01").Year, DateTime.Parse(selectedMonth + "-01").Month); i++)
                                {
                                    <th class="text-center">@i</th>
                                }
                                <th>Total Present</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!employees.Any())
                            {
                                <tr>
                                    <td colspan="@(DateTime.DaysInMonth(DateTime.Parse(selectedMonth + "-01").Year, DateTime.Parse(selectedMonth + "-01").Month) + 4)" class="text-center">No employees found.</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var employee in employees)
                                {
                                    var employeeAttendance = Model.Where(a => a.EmployeeId == employee.Id).ToList();
                                    var presentDays = employeeAttendance.Count(a => a.ClockOut != null &&
                                    !holidays.Any(h => h.Date.Date == a.ClockIn.Date));
                                    <tr>
                                        <td>@employee.Id</td>
                                        <td><a asp-action="EmployeeAttendance" asp-route-employeeId="@employee.Id">@($"{employee.FirstName} {employee.LastName}")</a></td>
                                        <td>@employee.Department</td>
                                        @for (int day = 1; day <= DateTime.DaysInMonth(DateTime.Parse(selectedMonth + "-01").Year, DateTime.Parse(selectedMonth + "-01").Month); day++)
                                        {
                                            var date = DateTime.Parse(selectedMonth + $"-{day:00}");
                                            var isFutureDate = date > DateTime.Today;
                                            var attendance = employeeAttendance.FirstOrDefault(a => a.ClockIn.Date == date);
                                            var isHoliday = holidays.Any(h => h.Date.Date == date);
                                            var isWeekOff = false;

                                            // Check if employee is on leave for this date
                                            var leaveRequest = leaveRequests.FirstOrDefault(l => l.EmployeeId == employee.Id &&
                                            l.StartDate.Date <= date.Date &&
                                            l.EndDate.Date >= date.Date);
                                            var isOnLeave = leaveRequest != null;
                                            var isHalfDay = isOnLeave && (date.Date == leaveRequest!.StartDate.Date && !string.IsNullOrEmpty(leaveRequest.StartHalf) ||
                                            date.Date == leaveRequest!.EndDate.Date && !string.IsNullOrEmpty(leaveRequest.EndHalf));
                                            var isFirstHalf = isHalfDay && ((date.Date == leaveRequest!.StartDate.Date && leaveRequest.StartHalf == "First") ||
                                            (date.Date == leaveRequest!.EndDate.Date && leaveRequest.EndHalf == "First"));
                                            var isSecondHalf = isHalfDay && ((date.Date == leaveRequest!.StartDate.Date && leaveRequest.StartHalf == "Second") ||
                                            (date.Date == leaveRequest!.EndDate.Date && leaveRequest.EndHalf == "Second"));

                                            // var isHalfDay = isOnLeave && (date.Date == leaveRequest.StartDate.Date && !string.IsNullOrEmpty(leaveRequest.StartHalf) ||
                                            // date.Date == leaveRequest.EndDate.Date && !string.IsNullOrEmpty(leaveRequest.EndHalf));
                                            // var isFirstHalf = isHalfDay && ((date.Date == leaveRequest.StartDate.Date && leaveRequest.StartHalf == "First") ||
                                            // (date.Date == leaveRequest.EndDate.Date && leaveRequest.EndHalf == "First"));
                                            // var isSecondHalf = isHalfDay && ((date.Date == leaveRequest.StartDate.Date && leaveRequest.StartHalf == "Second") ||
                                            // (date.Date == leaveRequest.EndDate.Date && leaveRequest.EndHalf == "Second"));

                                            if (employee.WorkWeekRule != null && !string.IsNullOrEmpty(employee.WorkWeekRule.WeeklyPatternJson))
                                            {
                                                try
                                                {
                                                    var weeklyPattern = System.Text.Json.JsonSerializer.Deserialize<int[][]>(employee.WorkWeekRule.WeeklyPatternJson);
                                                    if (weeklyPattern != null && weeklyPattern.Length > 0)
                                                    {
                                                        int weekNumber = ((date.Day - 1) / 7) + 1;
                                                        if (weekNumber > 5) weekNumber = 5;
                                                        int dayOfWeek = ((int)date.DayOfWeek + 6) % 7;
                                                        isWeekOff = weekNumber <= weeklyPattern.Length &&
                                                        dayOfWeek < weeklyPattern[weekNumber - 1].Length &&
                                                        weeklyPattern[weekNumber - 1][dayOfWeek] == 0;
                                                    }
                                                }
                                                catch
                                                {
                                                    isWeekOff = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                                                }
                                            }
                                            else
                                            {
                                                isWeekOff = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                                            }

                                            var status = "Absent"; // Default status
                                            if (isFutureDate)
                                            {
                                                status = "Future";
                                            }
                                            else if (isHoliday)
                                            {
                                                status = "Holiday";
                                            }
                                            else if (isWeekOff)
                                            {
                                                status = "WeekOff";
                                            }
                                            else if (isOnLeave)
                                            {
                                                if (isHalfDay)
                                                {
                                                    status = isFirstHalf ? "FirstHalf" : "SecondHalf";
                                                }
                                                else
                                                {
                                                    status = "Leave";
                                                }
                                            }
                                            else if (attendance != null)
                                            {
                                                if (attendance.ClockOut != null)
                                                {
                                                    status = attendance.ClockIn.TimeOfDay > TimeSpan.FromHours(9) ? "Late" : "Present";
                                                }
                                            }
                                            <td class="text-center">
                                                @if (status == "Future")
                                                {
                                                    <span>-</span>
                                                }
                                                else if (status == "Holiday")
                                                {
                                                    <span class="badge bg-info" title="@holidays.First(h => h.Date.Date == date).Title">
                                                        H
                                                    </span>
                                                }
                                                else if (status == "WeekOff")
                                                {
                                                    <span class="badge bg-secondary">WO</span>
                                                }
                                                else if (status == "Leave")
                                                {
                                                    <span class="badge bg-primary">L</span>
                                                }
                                                else if (status == "FirstHalf")
                                                {
                                                    <span class="badge bg-primary" title="First Half Leave">FH</span>
                                                }
                                                else if (status == "SecondHalf")
                                                {
                                                    <span class="badge bg-primary" title="Second Half Leave">SH</span>
                                                }
                                                else
                                                {
                                                    <span class="badge @(status == "Present" ? "bg-success" :
                                                                                                                                                            status == "Late" ? "bg-warning" :
                                                                                                                                                            "bg-danger")">
                                    @(status == "Present" ? "P" : status == "Late" ? "L" : "A")
                                </span>
                                                                }
                                            </td>

                                        }
                                        <td>@presentDays</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Attendance Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Attendance Logs</h5>
                <div>
                    <button class="btn btn-sm btn-danger me-2" onclick="importAttendance()">Import</button>
                    <button class="btn btn-sm btn-primary" onclick="exportAttendance()">Export</button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Employee Name</th>
                                <th>Status</th>
                                <th>In Time</th>
                                <th>Out Time</th>
                                <th>Work Duration</th>
                                <th>Actual Hours</th>
                                <th>Total Break Duration</th>
                                <th>Compliance Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!Model.Any())
                            {
                                <tr>
                                    <td colspan="10" class="text-center">No attendance records found for @(ViewBag.FromDate?.ToString("yyyy-MM-dd") ?? today.ToString("yyyy-MM-dd")).</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var item in Model)
                                {
                                    var status = item.ClockOut != null ? "Present" : "Absent";
                                    var isLate = item.ClockIn.TimeOfDay > TimeSpan.FromHours(9); // Adjust cutoff as needed
                                    if (isLate && item.ClockOut != null) status = "Late";
                                    var workDuration = item.ClockOut.HasValue ? (item.ClockOut.Value - item.ClockIn) : TimeSpan.Zero;
                                    var effectiveWorkDuration = workDuration - item.TotalBreakDuration; // Work duration excluding break time
                                    var actualHours = effectiveWorkDuration; // Actual hours after subtracting breaks
                                    var shortHours = actualHours < expectedHours ? (expectedHours - actualHours) : TimeSpan.Zero;

                                    <tr>
                                        <td>@item.Employee?.Id</td>
                                        <td><a asp-action="EmployeeAttendance" asp-route-employeeId="@item.EmployeeId">@($"{item.Employee?.FirstName} {item.Employee?.LastName}")</a></td>
                                        <td>
                                            <span class="badge @(status == "Present" ? "bg-success" :
                                                           status == "Late" ? "bg-warning" :
                                                           "bg-danger")">@status</span>
                                        </td>
                                        <td>@item.ClockIn.ToString("hh:mm tt")</td>
                                        <td>@(item.ClockOut?.ToString("hh:mm tt") ?? "--")</td>
                                        <td>@(effectiveWorkDuration.Hours)h @(effectiveWorkDuration.Minutes)m</td>
                                        <td>
                                            @if (actualHours >= expectedHours)
                                            {
                                                @actualHours.ToString(@"hh\:mm")
                                            }
                                            else
                                            {
                                                <span style="color: red;">-@(shortHours.ToString(@"hh\:mm"))</span>
                                            }
                                        </td>
                                        <td>@(item.TotalBreakDuration.ToString(@"hh\:mm"))</td>
                                        <td>
                                            <span class="badge @(actualHours >= expectedHours ? "bg-success" : "bg-warning")">
                                                @(actualHours >= expectedHours ? "Complete" : "Short")
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#editAttendanceModal"
                                                    data-id="@item.Id" data-clockin="@item.ClockIn.ToString("yyyy-MM-ddTHH:mm")"
                                                    data-clockout="@(item.ClockOut?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                                                Edit
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editAttendanceModal" tabindex="-1" aria-labelledby="editAttendanceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editAttendanceForm" asp-action="AdjustAttendance" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAttendanceModalLabel">Edit Attendance</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editId" name="id" />
                    <div class="mb-3">
                        <label class="form-label">Clock In</label>
                        <input type="datetime-local" class="form-control" id="editClockIn" name="clockIn" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Clock Out</label>
                        <input type="datetime-local" class="form-control" id="editClockOut" name="clockOut" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Manual Entry Modal -->
<div class="modal fade" id="manualEntryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Create Manual Attendance Entry</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="manualEntryForm" asp-action="CreateManualEntry" method="post">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Employee <span class="text-danger">*</span></label>
                            <select class="form-select" id="employeeSelect" name="EmployeeId" required>
                                <option value="">Select Employee</option>
                                @foreach (var emp in employees)
                                {
                                    if (emp != null)
                                    {
                                        <option value="@emp.Id">@emp.FirstName @emp.LastName - @emp.Department</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="entryDate" name="Date" required
                                   value="@today.ToString("yyyy-MM-dd")" max="@today.ToString("yyyy-MM-dd")">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Clock In Time <span class="text-danger">*</span></label>
                            <input type="time" class="form-control" id="clockInTime" name="ClockInTime" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Clock Out Time</label>
                            <input type="time" class="form-control" id="clockOutTime" name="ClockOutTime">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Entry</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    $('#editAttendanceModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var id = button.data('id');
        var clockIn = button.data('clockin');
        var clockOut = button.data('clockout');
        var modal = $(this);
        modal.find('#editId').val(id);
        modal.find('#editClockIn').val(clockIn);
        modal.find('#editClockOut').val(clockOut);
    });

     $('#manualEntryForm').submit(function (e) {
        e.preventDefault();

        const formData = {
            EmployeeId: parseInt($('#employeeSelect').val()),
            Date: $('#entryDate').val(),
            ClockInTime: $('#clockInTime').val(),
            ClockOutTime: $('#clockOutTime').val() || null
        };

        $.ajax({
            url: '@Url.Action("CreateManualEntry", "Attendance")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function (response) {
                $('#manualEntryModal').modal('hide');
                showToast('Success', 'Manual entry created successfully!', 'success');
                setTimeout(() => location.reload(), 1500);
            },
            error: function (xhr) {
                const errorMsg = xhr.responseJSON?.message || 'Failed to create manual entry';
                console.log(xhr.responseJSON); // Debug the response
                showToast('Error', errorMsg, 'danger');
            }
        });
    });

    $('#editAttendanceForm').submit(function (e) {
        e.preventDefault();

        const formData = {
            Id: $('#editId').val(),
            ClockIn: $('#editClockIn').val(),
            ClockOut: $('#editClockOut').val(),
            IsOnBreak: $('#editIsOnBreak').is(':checked')
        };

        $.ajax({
            url: '@Url.Action("UpdateAttendance", "Attendance")',
            method: 'POST',
            data: formData,
            success: function () {
                $('#editAttendanceModal').modal('hide');
                showToast('Success', 'Attendance updated successfully!', 'success');
                setTimeout(() => location.reload(), 1500);
            },
            error: function () {
                showToast('Error', 'Failed to update attendance.', 'danger');
            }
        });
    });

    function exportAttendance() {
        window.location.href = '@Url.Action("ExportAttendance", "Admin")';
    }

    function importAttendance() {
        window.location.href = '@Url.Action("ImportAttendance", "Admin")';
    }

    function printAttendance() {
        window.print();
    }
</script>